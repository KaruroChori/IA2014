// Testata nel suo porting in C++. Funziona correttamente, il parametro sigma 
// si occupa di definire quanti intervalli di std-dev considerare nel remapping
// su immagine "normale"

public int[][] doIt(int image[][], int width, int height, int sigma){
	int temp[][]=new int[width][height];
	int times[]=new int[256];
	long mean=0;
	long variance=0;

	// Valuto la distribuzione del colore e la media
	for(int h=0;h<height;h++){
		for(int w=0;w<width;w++){
			times[image[w][h]]++;
			mean+=image[w][h];
		}
	}
	
	mean/=(width*height);
	
	// Calcolo la varianza
	for(int i=0;i!=256;i++)variance+=pow(i-mean,2)*times[i];

	variance/=(width*height);
	
	double stddev=Math.sqrt((double)variance);

	for(int h=0;h<height;h++){
		for(int w=0;w<width;w++){
			
			//Queste due righe operano la normalizzazione. Teoricamente noi dovremo usare l'immagine così
			//anche per il calcolo dell'immagine integrale. Riconvertirla in immagine è possibile, perdendo 
			//delle componenti troppo esterne  ma non lo trovo l'approccio giusto da seguire se non come 
			//semplice debug visivo... ASSUMENDO temp di tipo double ovviamente e non intero come invece ho messo!
			//OPTION:1[
			temp[w][h]=(double)image[w][h]-mean;
			temp[w][h]/=stddev;
			//]
			
			//Per una normalizzazione visibile tenete questa parte invece. Ma ripeto non è molto bello usarla 
			//per fare calcoli sull'immagine in seguito...

			//OPTION:2[
			temp[w][h]=image[w][h]-mean;											//Allinea la media allo 0
			if(temp[w][h]<-((double)sigma*stddev))temp[w][h]=-128;					//Satura i pezzi fuori dominio
			else if(temp[w][h]>((double)sigma*stddev))temp[w][h]=127;				//Satura i pezzi fuori dominio
			else temp[w][h]*=(double)256/((double)*sigma*(double)stddev);			//Riscalo il dominio dei colori...
			temp[w][h]+=128;
			//]
		}
	}
	
	return temp;
}
